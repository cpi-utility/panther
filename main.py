import os

os.system("pip install -r requirements.txt")

# bot.py
import os
import json
from PIL import Image
from pyzbar.pyzbar import decode
import telebot
import sqlite3
from telebot import types
from config import TOKEN, TEACHER, OWNER
from colorama import Fore, Back, Style
import qrcode
from io import BytesIO
import json
import subprocess

os.system("cls")

bot = telebot.TeleBot(TOKEN)
DB_FILE = 'accounts.db'
last_found_user_id = None

def prm(chatid):
    bot.send_message(chatid, "üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!\n–ü—Ä–∏—á–∏–Ω–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–Ω–æ–º–æ—á–∏–π")

def create_table():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS accounts (
            ID INTEGER PRIMARY KEY,
            Balance INTEGER,
            Name TEXT
        )
    ''')
    conn.commit()
    conn.close()

def get_balance_name(chat_id):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('SELECT Balance, Name FROM accounts WHERE ID = ?', (chat_id,))
    result = cursor.fetchone()
    conn.close()
    return result if result else (None, None)

def update_balance_name(chat_id, new_balance, name):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO accounts (ID, Balance, Name) VALUES (?, ?, ?)', (chat_id, new_balance, name))
    
    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–æ 0
    if new_balance != 0:
        cursor.execute('UPDATE accounts SET Balance = ? WHERE ID = ?', (new_balance, chat_id))
    
    conn.commit()
    cursor.execute('SELECT Balance FROM accounts WHERE ID = ?', (chat_id,))
    result = cursor.fetchone()[0]
    conn.close()
    return result


def get_id_by_name(name):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('SELECT ID FROM accounts WHERE Name = ?', (name,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def get_balance(chat_id):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('SELECT Balance FROM accounts WHERE ID = ?', (chat_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def update_balance(chat_id, new_balance):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO accounts (ID, Balance) VALUES (?, ?)', (chat_id, new_balance))
    cursor.execute('UPDATE accounts SET Balance = ? WHERE ID = ?', (new_balance, chat_id))
    conn.commit()
    cursor.execute('SELECT Balance FROM accounts WHERE ID = ?', (chat_id,))
    result = cursor.fetchone()[0]
    conn.close()
    return result

def get_students():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('SELECT Name, ID FROM accounts WHERE ID != ?', (TEACHER,))
    students = cursor.fetchall()
    conn.close()
    return students

@bot.message_handler(commands=['start'])
def handle_start(message):
    create_table()
    user_id = message.chat.id

    if user_id == TEACHER:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üîª –°–ø–∏—Å–∞—Ç—å")
        item2 = types.KeyboardButton("üî∫ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
        item3 = types.KeyboardButton("–ë–∞–ª–∞–Ω—Å")
        item4 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏")
        item5 = types.KeyboardButton("üõç –ü–æ–∫—É–ø–∫–∏")
        item6 = types.KeyboardButton("üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ")
        markup.add(item1, item2, item3, item4, item5, item6)

        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=markup)
    else:
        balance, name = get_balance_name(user_id)

        if balance is None:
            bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:")
            bot.register_next_step_handler(message, process_registration)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üîí –ú–æ–π —Å—á—ë—Ç")
            item2 = types.KeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–≤–æ–¥")
            item3 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫")
            item4 = types.KeyboardButton("üõç –ü–æ–∫—É–ø–∫–∏")
            item5 = types.KeyboardButton(last_found_user_id)
            
            if last_found_user_id == None:
                markup.add(item1, item2, item3, item4)
            else:
                markup.add(item1, item2, item3, item4, item5)

            bot.send_message(user_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n–í–∞—à —Å—á—ë—Ç:\nID: {user_id}\n–ë–∞–ª–∞–Ω—Å: {balance} –±–∞–ª–ª–æ–≤", reply_markup=markup)


def process_registration(message):
    user_id = message.chat.id
    name = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_balance_name(user_id, 0, name)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üîí –ú–æ–π —Å—á—ë—Ç")
    item2 = types.KeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–≤–æ–¥")
    item3 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫")
    item4 = types.KeyboardButton(last_found_user_id)
    if last_found_user_id != None:
        markup.add(item1, item2, item3, item4)

    else:
        markup.add(item1, item2, item3)

    bot.send_message(user_id, f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {name}!\n–í–∞—à —Å—á—ë—Ç:\nID: {user_id}\n–ë–∞–ª–∞–Ω—Å: 0 –±–∞–ª–ª–æ–≤", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏")
def handle_teacher_search_by_name(message):
    if message.chat.id == TEACHER:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        bot.register_next_step_handler(message, process_teacher_search_by_name)
    else:
        prm(message.chat.id)

def process_teacher_search_by_name(message):
    name = message.text
    user_id = get_id_by_name(name)

    if user_id is not None:
        balance, _ = get_balance_name(user_id)
        global last_found_user_id
        last_found_user_id = user_id

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üîª –°–ø–∏—Å–∞—Ç—å")
        item2 = types.KeyboardButton("üî∫ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
        item3 = types.KeyboardButton("–ë–∞–ª–∞–Ω—Å")
        item4 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏")
        item5 = types.KeyboardButton("üõç –ü–æ–∫—É–ø–∫–∏")
        item6 = types.KeyboardButton("üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ")
        markup.add(item1, item2, item3, item4, item5, item6)

        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –Ω–∞–π–¥–µ–Ω!\nID: {user_id}\n–ë–∞–ª–∞–Ω—Å: {balance} –±–∞–ª–ª–æ–≤.", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—á–∏—Ç–µ–ª—è (TEACHER)
@bot.message_handler(func=lambda message: message.text == "üîª –°–ø–∏—Å–∞—Ç—å")
def handle_teacher_withdraw(message):
    if message.chat.id == TEACHER:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞:")
        bot.register_next_step_handler(message, process_teacher_withdraw_account)

    else:
        prm(message.chat.id)

def process_teacher_withdraw_account(message):
    account_id = int(message.text)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:")
    bot.register_next_step_handler(message, process_teacher_withdraw_amount, account_id)

def process_teacher_withdraw_amount(message, account_id):
    try:
        amount = int(message.text)
        account_balance = get_balance(account_id)

        if account_balance is not None and account_balance >= amount:
            updated_account_balance = update_balance(account_id, account_balance - amount)
            bot.send_message(message.chat.id, f"–°–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
            bot.send_message(account_id, f"–°–ø–∏—Å–∞–Ω–∏–µ {amount} –±–∞–ª–ª–æ–≤ —Å —Å—á—ë—Ç–∞ {account_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {updated_account_balance} –±–∞–ª–ª–æ–≤\n–°—Ç–∞—Ç—É—Å: ‚úÖ")
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É.")
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == "üî∫ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
def handle_teacher_deposit(message):
    if message.chat.id == TEACHER:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞:")
        bot.register_next_step_handler(message, process_teacher_deposit_account)
    else:
        prm(message.chat.id)

def process_teacher_deposit_account(message):
    account_id = int(message.text)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_teacher_deposit_amount, account_id)

def process_teacher_deposit_amount(message, account_id):
    try:
        amount = int(message.text)
        if amount > 0:
            account_balance = get_balance(account_id) or 0
            updated_account_balance = update_balance(account_id, account_balance + amount)
            bot.send_message(message.chat.id, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
            bot.send_message(account_id, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount} –±–∞–ª–ª–æ–≤ –Ω–∞ —Å—á—ë—Ç {account_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {updated_account_balance} –±–∞–ª–ª–æ–≤\n–°—Ç–∞—Ç—É—Å: ‚úÖ")
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == "–ë–∞–ª–∞–Ω—Å")
def handle_teacher_check_balance(message):
    if message.chat.id == TEACHER:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞:")
        bot.register_next_step_handler(message, process_teacher_check_balance)

    else:
        prm(message.chat.id)

def process_teacher_check_balance(message):
    account_id = int(message.text)
    account_balance = get_balance(account_id)

    if account_balance is not None:
        bot.send_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ {account_id}: {account_balance} –±–∞–ª–ª–æ–≤.")
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(func=lambda message: message.text == "üîí –ú–æ–π —Å—á—ë—Ç")
def handle_my_account(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üîô")
    item2 = types.KeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–≤–æ–¥")
    markup.add(item1, item2)

    balance = get_balance(message.chat.id)
    bot.send_message(message.chat.id, f"–í–∞—à —Å—á—ë—Ç:\nID: {message.chat.id}\n–ë–∞–ª–∞–Ω—Å: {balance} –±–∞–ª–ª–æ–≤", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ôªÔ∏è –ü–µ—Ä–µ–≤–æ–¥")
def handle_transfer(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton(last_found_user_id)
    markup.add(item1)

    if last_found_user_id != None:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, process_transfer_account)

    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
        bot.register_next_step_handler(message, process_transfer_account)

def process_transfer_account(message):
    to_account = message.text

    if to_account == str(message.chat.id):
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–∞–ª–ª—ã —Å–∞–º–æ–º—É —Å–µ–±–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        handle_home(message)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    item1 = types.KeyboardButton("1")
    item2 = types.KeyboardButton("10")
    item3 = types.KeyboardButton("100")

    markup.add(item1, item2, item3)

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 1):", reply_markup=markup)
    bot.register_next_step_handler(message, process_transfer_amount, to_account)



def process_transfer_amount(message, to_account):
    try:
        amount = int(message.text)

        if amount < 1:
            raise ValueError("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 1 –±–∞–ª–ª–∞")

        from_account_balance = get_balance(message.chat.id)

        if from_account_balance is not None and from_account_balance >= amount:
            to_account_balance = get_balance(to_account)

            if to_account_balance is not None:
                update_balance(message.chat.id, from_account_balance - amount)
                updated_to_account_balance = update_balance(to_account, to_account_balance + amount)
                from_user_name = get_balance_name(message.chat.id)[1]
                bot.send_message(message.chat.id, f"–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
                bot.send_message(to_account, f"–ü–µ—Ä–µ–≤–æ–¥ {amount} –±–∞–ª–ª–æ–≤ –æ—Ç {from_user_name} –Ω–∞ —Å—á—ë—Ç {to_account} –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {updated_to_account_balance} –±–∞–ª–ª–æ–≤\n–°—Ç–∞—Ç—É—Å: ‚úÖ", reply_markup=None)
            else:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –Ω–∞ —Å—á–µ—Ç—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except ValueError as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üîí –ú–æ–π —Å—á—ë—Ç")
    item2 = types.KeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–≤–æ–¥")
    item3 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫")
    item4 = types.KeyboardButton(last_found_user_id)
    if last_found_user_id != None:
        markup.add(item1, item2, item3, item4)

    else:
        markup.add(item1, item2, item3)

    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫")
def handle_teacher_search_by_name(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(message, process_children_search_by_name)

def process_children_search_by_name(message):
    name = message.text
    user_id = get_id_by_name(name)

    if user_id is not None:
        balance, _ = get_balance_name(user_id)
        global last_found_user_id
        last_found_user_id = user_id

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üîí –ú–æ–π —Å—á—ë—Ç")
        item2 = types.KeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–≤–æ–¥")
        item3 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫")
        item4 = types.KeyboardButton(last_found_user_id)
        markup.add(item1, item2, item3, item4)

        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –Ω–∞–π–¥–µ–Ω!\nID: {user_id}\n–ë–∞–ª–∞–Ω—Å: {balance} –±–∞–ª–ª–æ–≤.", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=['payme'])
def get_money(message):
    if message.chat.id == OWNER:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üîô")
        item2 = types.KeyboardButton("–°–ø–∏—Å–∞—Ç—å –Ω–∞–ª–æ–≥")
        markup.add(item1, item2)
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è", reply_markup=markup)

    else:
        prm(message.chat.id)

@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–∞—Ç—å –Ω–∞–ª–æ–≥")
def Nalogi(message):
    if message.chat.id == OWNER:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å OWNER
        owner_balance = get_balance(OWNER)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('SELECT ID, Balance FROM accounts')
        rows = cursor.fetchall()

        for row in rows:
            user_id, balance = row

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ —Ä–∞–≤–µ–Ω TEACHER –∏ OWNER
            if user_id != TEACHER and user_id != OWNER:
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã—á–∏—Ç–∞—è 1 –±–∞–ª–ª
                updated_balance = update_balance(user_id, balance - 1)
                bot.send_message(user_id, f"–°–ø–∏—Å–∞–Ω 1 –±–∞–ª–ª –Ω–∞–ª–æ–≥–∞. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {updated_balance} –±–∞–ª–ª–æ–≤.")

                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å OWNER, –¥–æ–±–∞–≤–ª—è—è 1 –±–∞–ª–ª
                owner_balance = update_balance(OWNER, owner_balance + 1)

        conn.close()
        bot.send_message(OWNER, f"–°–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {owner_balance} –±–∞–ª–ª–æ–≤.")
    else:
        prm(message.chat.id)

@bot.message_handler(func=lambda message: message.text == "üõç –ü–æ–∫—É–ø–∫–∏")
def handle_purchase(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üîô")
    item2 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –º–æ–π —Ç–æ–≤–∞—Ä")
    markup.add(item1, item2)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–∫—É–ø–æ–∫! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=markup)
    bot.register_next_step_handler(message, process_qr_code)

def process_qr_code(message):
    if message.text == "üîô":
        handle_home(message)
        return
    elif message.text == "–°–æ–∑–¥–∞—Ç—å –º–æ–π —Ç–æ–≤–∞—Ä":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
        bot.register_next_step_handler(message, process_create_product_price)
    else:
        try:
            file_id = message.photo[-1].file_id
            file_info = bot.get_file(file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)

            with open("qr_code.jpg", 'wb') as new_file:
                new_file.write(downloaded_file)

            qr_data = decode(Image.open("qr_code.jpg"))

            if qr_data:
                qr_text = qr_data[0].data.decode('utf-8')
                qr_info = json.loads(qr_text)

                if "Summ" in qr_info and "Description" in qr_info and "Author" in qr_info:
                    purchase_sum = qr_info["Summ"]
                    description = qr_info["Description"]
                    author_id = qr_info["Author"]

                    user_balance = get_balance(message.chat.id)

                    if user_balance is not None and user_balance >= purchase_sum:
                        update_balance(message.chat.id, user_balance - purchase_sum)
                        author_balance = update_balance(author_id, get_balance(author_id) + purchase_sum)

                        bot.send_message(message.chat.id, f"–û–ø–ª–∞—á–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞: {description}")
                        bot.send_message(author_id, f"–¢–æ–≤–∞—Ä –æ–ø–ª–∞—á–µ–Ω!\n–°—É–º–º–∞: {purchase_sum}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {message.chat.id}")

                    else:
                        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏.")
                else:
                    bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞.")
            else:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: QR-–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception as e:
            print(e)
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        os.remove("qr_code.jpg")
        handle_home(message)

def process_create_product_price(message):
    try:
        price = int(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        bot.register_next_step_handler(message, process_create_product_description, price)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

def process_create_product_description(message, price):
    description = message.text

    author_id = message.chat.id

    product_info = {
        "Summ": price,
        "Description": description,
        "Author": author_id
    }

    qr_code_text = json.dumps(product_info)

    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ qrcode
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(qr_code_text)
    qr.make(fit=True)

    img = qr.make_image(fill_color="black", back_color="white")

    img_byte_array = BytesIO()
    img.save(img_byte_array)
    img_byte_array.seek(0)

    bot.send_photo(message.chat.id, photo=img_byte_array, caption="QR-–∫–æ–¥ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏.")

    handle_home(message)


@bot.message_handler(func=lambda message: message.text == "üîô")
def handle_home(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if message.chat.id == TEACHER:
        item1 = types.KeyboardButton("üîª –°–ø–∏—Å–∞—Ç—å")
        item2 = types.KeyboardButton("üî∫ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
        item3 = types.KeyboardButton("–ë–∞–ª–∞–Ω—Å")
        item4 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏")
        item5 = types.KeyboardButton("üõç –ü–æ–∫—É–ø–∫–∏")
        item6 = types.KeyboardButton("üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ")
        markup.add(item1, item2, item3, item4, item5, item6)
    else:
        item1 = types.KeyboardButton("üîí –ú–æ–π —Å—á—ë—Ç")
        item2 = types.KeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–≤–æ–¥")
        item3 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫")
        item4 = types.KeyboardButton("üõç –ü–æ–∫—É–ø–∫–∏")
        item5 = types.KeyboardButton(last_found_user_id)
        if last_found_user_id == None:
            markup.add(item1, item2, item3, item4)
        else:
            markup.add(item1, item2, item3, item4, item5)

    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ")
def handle_announce(message):
    if message.chat.id == TEACHER:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üîô")
        item2 = types.KeyboardButton("–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
        item3 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞")
        markup.add(item1, item2, item3)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, process_announcement_choice)
    else:
        prm(message.chat.id)

def process_announcement_choice(message):
    if message.text == "üîô":
        handle_home(message)
        return
    elif message.text == "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_announcement)
    elif message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞":
        bot.send_message(message.chat.id, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç:")
        bot.register_next_step_handler(message, process_announcement_media)

def process_announcement(message):
    announcement_text = message.text
    send_announcement_to_users(message, announcement_text, None)

def process_announcement_media(message):
    if message.photo or message.video or message.sticker or message.voice:
        media_file = None

        if message.photo:
            media_file = message.photo[-1].file_id
        elif message.video:
            media_file = message.video.file_id
        elif message.sticker:
            media_file = message.sticker.file_id
        elif message.voice:
            media_file = message.voice.file_id

        if media_file:
            send_announcement_to_users(message, None, media_file)
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–¥–∏–∞-—Ñ–∞–π–ª –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é.")
            handle_home(message)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞.")
        handle_home(message)

def send_announcement_to_users(message, announcement_text, media_file):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT ID FROM accounts')
    users = cursor.fetchall()

    for user_id in users:
        try:
            if media_file:
                if media_file.startswith('CAACAgIA') or media_file.startswith('AgAC'):
                    # –ï—Å–ª–∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª —ç—Ç–æ —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    bot.send_sticker(user_id[0], media_file)
                elif media_file.startswith('BQACAgIA') or media_file.startswith('AgAD'):
                    # –ï—Å–ª–∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª —ç—Ç–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
                    bot.send_photo(user_id[0], media_file, caption=announcement_text)
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
            else:
                bot.send_message(user_id[0], announcement_text)
        except Exception as e:
            print(f"Error sending announcement to user {user_id[0]}: {str(e)}")

    conn.close()

    bot.send_message(TEACHER, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    handle_home(message)

@bot.message_handler(commands=['update'])
def handle_update(message):
    if message.chat.id == OWNER:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã '/update'
        command_text = message.text.split(' ', 1)[-1]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ipsbupdate.py –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
        if os.name == 'nt':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É (Windows)
            command = f'start python ipsbupdate.py {command_text}'
        else:  # –î–ª—è Linux –∏ –¥—Ä—É–≥–∏—Ö –û–°
            command = f'x-terminal-emulator -e python ipsbupdate.py {command_text}'

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å –∫–æ–º–∞–Ω–¥–æ–π
        try:
            subprocess.Popen(command, shell=True)
            bot.send_message(OWNER, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –ë–æ—Ç –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞
            os._exit(0)
        except Exception as e:
            bot.send_message(OWNER, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    else:
        prm(message.chat.id)

if __name__ == "__main__":
    print('Bot started!')
    bot.polling(none_stop=True)
